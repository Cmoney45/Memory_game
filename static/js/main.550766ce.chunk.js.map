{"version":3,"sources":["components/PictureCards/index.js","components/NavBar/index.js","components/Jumbotron/index.js","components/GameWrapper/index.js","App.js","index.js"],"names":["PictureCard","props","react_default","a","createElement","className","onClick","removeFriend","id","alt","name","src","image","Navbar","score","highScore","Jumbotron","class","Wrapper","children","App","state","currentSet","dinosaurs","currentSetCount","guessedImages","userGuess","currentGuess","_this","filter","friend","duplicateGuess","i","console","log","setState","push","updateScores","shuffleCurretSet","correctGuess","setToShuffle","temp","index","ctr","length","newSet","Math","floor","random","_this2","this","NavBar","components_Jumbotron","GameWrapper","map","PictureCards","key","occupation","location","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.550766ce.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction PictureCard(props) {\n  return (\n    <div className=\"card bg-dark\" onClick={() => props.removeFriend(props.id)}>\n      <img className=\"card-img\" alt={props.name} src={props.image} />\n        <div className=\"protitle\">\n          {props.name}\n        </div>\n    </div>\n  );\n}\n\nexport default PictureCard;\n","import React from \"react\";\n\n\nfunction Navbar (props) {\n    return <div className=\"navbar fixed-top navbar-light bg-dark text-light\">\n      <h2 className=\"mr-auto\">Memory game</h2>\n      <h4 className=\"m-auto\">Click an image to start!</h4>\n      <h4 className=\"ml-auto\">Score: {props.score} | Top Score: {props.highScore} </h4>\n    </div>\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n    return <div class=\"jumbotron jumbotron-fluid\">\n        <div class=\"container\">\n            <h1 class=\"display-4 text-center\">Memory Game</h1>\n            <p class=\"lead text-center\">\n                Click on an image to earn points, but don't click on any more than once!\n            </p>\n        </div>\n    </div>;\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper mt-3\">\n    {props.children}\n  </div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport PictureCards from \"./components/PictureCards\";\nimport Navbar from \"./components/NavBar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Wrapper from \"./components/GameWrapper\";\nimport dinosaurs from \"./dinosaurs.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    currentSet: dinosaurs,\n    currentSetCount: 0,\n    highScore: 0,\n    score: 0,\n    guessedImages: [],\n  }\n\n  userGuess = id => {\n    const currentGuess = this.state.currentSet.filter(friend =>  friend.id === id);\n    const guessedImages = this.state.guessedImages;\n    let duplicateGuess = false;\n\n    console.log(currentGuess)\n    for (let i in guessedImages) {\n      if (currentGuess[0].id === guessedImages[i].id) {\n        duplicateGuess = true;\n      }\n    }\n\n    if (duplicateGuess === true) {\n      this.setState({ score: 0, currentSetCount: 0 })\n      this.setState({ guessedImages: [] })\n    } else {\n      guessedImages.push(currentGuess[0]);\n      this.updateScores();\n      this.setState({ guessedImages: guessedImages });\n    }\n\n    this.shuffleCurretSet(this.state.currentSet);\n  };\n\n  updateScores = (correctGuess) => {\n    let score = this.state.score;\n\n    this.setState({ score: score + 1 })\n\n    if (this.state.score >= this.state.highScore) {\n      this.setState({ highScore: this.state.highScore + 1 })\n    }\n    this.setState({ currentSetCount: this.state.currentSetCount + 1 })\n\n  }\n\n  shuffleCurretSet = (setToShuffle) => {\n    let ctr = setToShuffle.length;\n    let newSet = setToShuffle;\n    let temp;\n    let index;\n\n    // While there are elements in the array\n    while (ctr > 0) {\n      // Pick a random index\n      index = Math.floor(Math.random() * ctr);\n      // Decrease ctr by 1\n      ctr--;\n      // And swap the last element with it\n      temp = newSet[ctr];\n      newSet[ctr] = newSet[index];\n      newSet[index] = temp;\n    }\n\n    this.setState({ currentSet: newSet })\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          highScore={this.state.highScore}\n        >\n        </Navbar>\n        <Jumbotron></Jumbotron>\n        <Wrapper>\n          {this.state.currentSet.map(friend => (\n            <PictureCards\n              removeFriend={this.userGuess}\n              id={friend.id}\n              key={friend.id}\n              name={friend.name}\n              image={friend.image}\n              occupation={friend.occupation}\n              location={friend.location}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}